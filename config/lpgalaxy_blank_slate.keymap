/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include "zmk-helpers/helper.h"
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#define _BT_SEL_KEYS_ &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR

#include "zmk-helpers/key-labels/4x12.h"
#include "zmk-helpers/unicode-chars/german.dtsi"

#define TBLE_DUAL_2U
/ {
    chosen {
       zmk,physical-layout =
#ifdef TBLE_DUAL_2U
                       &layout_ortho_4x12_2x2u;
#elif defined(TBLE_MIT)
                       &layout_ortho_4x12_1x2u;
#else
                       &layout_ortho_4x12_all1u;
#endif
    };

#define DEF 0
#define WDEF 1
#define COL 2
#define NAV 3
#define WNAV 4
#define NUM 5
#define SYM 6
#define SYS 7
#define LAN 8

#define TAB_SWAP &tab
#define TAB_BK &tab_bk
#define APP_SWAP &swapper
#define APP_BK &swapper_bk

//OSX
#define PREV_DSK &kp LC(LEFT)
#define NEXT_DSK &kp LC(RIGHT)
#define CP LG(C)
#define CT LG(X)
#define PST LG(V)
#define UDO LG(Z)
#define RDO LS(LG(Z))
#define MOVE_MSG &kp LS(LG(M))
#define NEW_TAB &kp LG(T)

//WIN
#define WPREV_DSK &kp LC(LG(LEFT))
#define WNEXT_DSK &kp LC(LG(RIGHT))
#define WCP LC(C)
#define WCT LC(X)
#define WPST LC(V)
#define WUDO LC(Z)
#define WRDO LS(LC(Z))
#define WMOVE_MSG &kp LS(LC(V))
#define WNEW_TAB &kp LC(T)


/*#include "combos.dtsi"  // requires layer aliases*/
/*#include "extra_keys.h"*/

/*layers and shortcuts*/
#define XXX &none
#define ___ &trans

/* Global settings */

#define QUICK_TAP_MS 175

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

&mt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};
/*custom behaviors*/

// homerow mods
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RM5  // right hand
#define THUMBS LH4 LH3 LH2 LH1 LH0 RH0 RH1 RH2 RH3 RH4                                      // thumbs

/* left-hand HRMs */
ZMK_BEHAVIOR(hml, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <250>;
    quick-tap-ms = <QUICK_TAP_MS>;                // repeat on tap-into-hold
    require-prior-idle-ms = <140>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)
/* right-hand HRMs */
ZMK_BEHAVIOR(hmr, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <250>;
    quick-tap-ms = <QUICK_TAP_MS>;                 // repeat on tap-into-hold
    require-prior-idle-ms = <140>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

ZMK_BEHAVIOR(hms, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <250>;
    quick-tap-ms = <QUICK_TAP_MS>;                 // repeat on tap-into-hold
    require-prior-idle-ms = <140>;
    bindings = <&kp>, <&col_semi_inner>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

//normal: tilde, shift: grave
ZMK_BEHAVIOR(col_semi_inner, mod_morph,
    bindings = <&kp COLON>, <&kp SEMI>;
    mods = <(MOD_LSFT|MOD_RSFT)>;)

// tap: backspace | shift + tap: delete | hold: num layer
ZMK_BEHAVIOR(bs_del_num, mod_morph,
    bindings = <&lt NUM BSPC>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)


// tap: backspace | shift + tap: delete 
ZMK_BEHAVIOR(bs_del, mod_morph,
    bindings = <&kp BSPC>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

/* Caps-word, num-word */
// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1451
    /delete-property/ ignore-modifiers;
    continue-list = <A B C D E F G H I J K L M N O P Q R S T U V W X Y Z UNDERSCORE MINUS>;
};                                                                                                                      

// Alt+Tab swapper, requires PR #1366

ZMK_TRI_STATE(swapper,
    bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
    ignored-key-positions = <LT2>;
)
ZMK_TRI_STATE(swapper_bk,
    bindings = <&kt LS(LALT)>, <&kp TAB>, <&kt LS(LALT)>;
    ignored-key-positions = <LT2>;
)

ZMK_TRI_STATE(tab,
    bindings = <&kt LCTRL>, <&kp TAB>, <&kt LCTRL>;
    ignored-key-positions = <LT2>;
)
ZMK_TRI_STATE(tab_bk,
    bindings = <&kt LS(LCTRL)>, <&kp TAB>, <&kt LS(LCTRL)>;
    ignored-key-positions = <LT2>;
)

//normal: tilde, shift: grave
ZMK_BEHAVIOR(tilde_grave, mod_morph,
    bindings = <&kp TILDE>, <&kp GRAVE>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)


ZMK_BEHAVIOR(dsk_cycle, tap_dance,
    tapping-term-ms = <200>;
    bindings = <NEXT_DSK>, <PREV_DSK>;
)

ZMK_BEHAVIOR(copy_cut, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp CP>, <&kp CT>;
)

ZMK_BEHAVIOR(udo_rdo, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp UDO>, <&kp RDO>;
)

ZMK_BEHAVIOR(wdsk_cycle, tap_dance,
    tapping-term-ms = <200>;
    bindings = <WNEXT_DSK>, <WPREV_DSK>;
)

ZMK_BEHAVIOR(wcopy_cut, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp WCP>, <&kp WCT>;
)

ZMK_BEHAVIOR(wudo_rdo, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp WUDO>, <&kp WRDO>;
)
#undef COMBO_TERM
#define COMBO_TERM 40  // timeout of 40ms (default is 30ms if omitted)
ZMK_COMBO(combo_copy,   &kp LG(C),  LB3 LB4, ALL)  // Ctrl + C, active on all layers
ZMK_COMBO(combo_paste,  &kp LG(V),  LB1 LB2, ALL)  // Ctrl + V, active on all layers
ZMK_COMBO(combo_tab,  &kp TAB,  LT3 LT4, ALL)  // esc
ZMK_COMBO(combo_esc,  &kp ESC,  RM1 RM2, ALL)  // esc
ZMK_COMBO(combo_bsp,  &kp BSPC,  RT3 RT4, ALL)  // backspace
ZMK_COMBO(combo_quotes,  &kp SQT,  RM3 RM4, DEF)  // quotes, only on default
ZMK_COMBO(combo_sym_minus,  &kp MINUS,  LT1 RT1, ALL)  // minus, all layers
ZMK_COMBO(combo_sym_under,  &kp UNDER,  LB1 RB1, ALL)  // under, all layers
ZMK_COMBO(combo_capsword,  &caps_word,  LB5 RB5, ALL)  // capsword, both shifts, all layers
ZMK_COMBO(combo_capsword,  &caps_word,  LM1 RM1, ALL)  // capsword, both hrm shifts, all layers

/* Keymap */

ZMK_CONDITIONAL_LAYER(system, NAV NUM, SYS)  // NAV + SYM --> SYS
ZMK_CONDITIONAL_LAYER(system, WNAV NUM, SYS)  // NAV + SYM --> SYS

ZMK_LAYER(default,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
       &mt LS(LGUI) ESC    &kp Q         &kp W         &kp E         &kp R        &kp T              &kp Y         &kp U         &kp I         &kp O         &kp P       &bs_del
     // ├─────────────┼─────────────┼─────────────┬─────────────┼─────────────┼─────────────┤   ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
       &mt LS(LALT) TAB &hml LCTRL A   &hml LALT S    &kp D        &hml LSHFT F   &kp G              &kp H      &hmr RSHFT J     &kp K      &hmr LALT L &hmr LCTRL SEMI &lt LAN SQT
     // ├─────────────┼─────────────┼─────────────┬─────────────┼─────────────┼─────────────┤   ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &smart_shft     &kp Z         &kp X         &kp C         &kp V         &kp B              &kp N        &kp M      &kp COMMA      &kp DOT        &kp FSLH     &smart_shft
     // ╰─────────────┼─────────────┼─────────────┬─────────────┼─────────────┼─────────────┤   ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
           &kp LCTRL      &kp LALT   &mt LGUI LPAR  &lt NAV TAB      XXX    &mt LCTRL RET           &lt SYM SPACE   XXX       &bs_del_num  &mt LALT RPAR   &kp MINUS     &kp EQUAL 
     // ╰─────────────┴─────────────┴─────────────┴─────────────┴───────────────────────────╯   ╰───────────────────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(wdef,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
            &kp ESC        &kp Q         &kp W         &kp E         &kp R        &kp T              &kp Y         &kp U         &kp I         &kp O         &kp P       &bs_del
     // ├─────────────┼─────────────┼─────────────┬─────────────┼─────────────┼─────────────┤   ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
            &kp TAB     &hml LCTRL A   &hml LALT S    &kp D        &hml LSHFT F   &kp G              &kp H      &hmr RSHFT J     &kp K      &hmr LALT L &hmr LCTRL SEMI &lt LAN SQT
     // ├─────────────┼─────────────┼─────────────┬─────────────┼─────────────┼─────────────┤   ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &smart_shft     &kp Z         &kp X         &kp C         &kp V         &kp B              &kp N        &kp M      &kp COMMA      &kp DOT        &kp FSLH     &smart_shft
     // ╰─────────────┼─────────────┼─────────────┬─────────────┼─────────────┼─────────────┤   ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
           &kp LCTRL      &kp LALT   &mt LGUI LPAR  &lt WNAV TAB      XXX   &mt LCTRL RET           &lt SYM SPACE   XXX       &bs_del_num  &mt LALT RPAR   &kp MINUS     &kp EQUAL 
     // ╰─────────────┴─────────────┴─────────────┴─────────────┴───────────────────────────╯   ╰───────────────────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(colemak,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
       &mt LS(LGUI) ESC    &kp Q         &kp W         &kp F         &kp P        &kp G              &kp J         &kp L         &kp U         &kp Y       &kp SEMI       &bs_del
     // ├─────────────┼─────────────┼─────────────┬─────────────┼─────────────┼─────────────┤   ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
       &mt LS(LALT) TAB &hml LCTRL A   &hml LALT R    &kp S        &hml LSHFT T   &kp D              &kp H      &hmr RSHFT N     &kp E      &hmr LALT I &hmr LCTRL O    &lt LAN SQT
     // ├─────────────┼─────────────┼─────────────┬─────────────┼─────────────┼─────────────┤   ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &smart_shft     &kp Z         &kp X         &kp C         &kp V         &kp B              &kp K        &kp M      &kp COMMA      &kp DOT        &kp FSLH     &smart_shft
     // ╰─────────────┼─────────────┼─────────────┬─────────────┼─────────────┼─────────────┤   ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
           &kp LCTRL      &kp LALT   &mt LGUI LPAR  &lt NAV TAB      XXX    &mt LCTRL RET           &lt SYM SPACE   XXX       &bs_del_num  &mt LALT RPAR   &kp MINUS     &kp EQUAL
     // ╰─────────────┴─────────────┴─────────────┴─────────────┴───────────────────────────╯   ╰───────────────────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
)


ZMK_LAYER(nav,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
             ___             XXX       &dsk_cycle    APP_SWAP      TAB_SWAP       NEW_TAB            &copy_cut      &udo_rdo         XXX           XXX        &kp PST         ___ 
     // ├─────────────┼─────────────┼─────────────┬─────────────┼─────────────┼─────────────┤   ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             ___      &mt LCTRL LG(A)   &kp LALT     &kp LGUI       NEW_TAB        XXX            &kp LEFT      &kp DOWN       &kp UP        &kp RIGHT       XXX           XXX
     // ├─────────────┼─────────────┼─────────────┬─────────────┼─────────────┼─────────────┤   ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             ___         &udo_rdo       &kp CT      &kp CP        &kp PST          XXX            MOVE_MSG       XXX            XXX           XXX            XXX            ___ 
     // ╰─────────────┼─────────────┼─────────────┬─────────────┼─────────────┼─────────────┤   ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             ___             XXX          XXX            XXX            XXX      XXX               &mt LCTRL SPACE   XXX        &mo NUM        XXX            XXX      &kp LG(SPACE)
     // ╰─────────────┴─────────────┴─────────────┴─────────────┴───────────────────────────╯   ╰───────────────────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(wnav,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
             ___             XXX       &wdsk_cycle    APP_SWAP      TAB_SWAP       NEW_TAB       &wcopy_cut      &wudo_rdo         XXX           XXX        &kp WPST         ___ 
     // ├─────────────┼─────────────┼─────────────┬─────────────┼─────────────┼─────────────┤   ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             ___      &mt LCTRL LC(A)   &kp LALT     &kp LGUI       WNEW_TAB        XXX            &kp LEFT      &kp DOWN       &kp UP        &kp RIGHT       XXX           XXX
     // ├─────────────┼─────────────┼─────────────┬─────────────┼─────────────┼─────────────┤   ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             ___         &wudo_rdo       &kp WCT      &kp WCP        &kp WPST       XXX             WMOVE_MSG       XXX            XXX           XXX            XXX            ___ 
     // ╰─────────────┼─────────────┼─────────────┬─────────────┼─────────────┼─────────────┤   ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             ___             XXX          XXX            XXX            XXX      XXX               &mt LCTRL SPACE   XXX        &mo NUM        XXX            XXX      &kp LG(SPACE)
     // ╰─────────────┴─────────────┴─────────────┴─────────────┴───────────────────────────╯   ╰───────────────────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(num,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
             XXX        &kp MINUS      &kp N1        &kp N2         &kp N3       &kp PLUS             XXX           XXX          XXX            XXX          XXX           XXX
     // ├─────────────┼─────────────┼─────────────┬─────────────┼─────────────┼─────────────┤   ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             XXX        &kp FSLH       &kp N4        &kp N5         &kp N6       &kp STAR            XXX        &kp LSHFT     &kp LGUI      &kp LALT      &kp LCTRL        XXX
     // ├─────────────┼─────────────┼─────────────┬─────────────┼─────────────┼─────────────┤   ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
             ___        &kp DOT        &kp N7        &kp N8         &kp N9       &kp EQUAL            XXX          XXX           XXX            XXX          XXX           ___ 
     // ╰─────────────┼─────────────┼─────────────┬─────────────┼─────────────┼─────────────┤   ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                XXX         XXX   &mt LGUI LPAR     &lt NAV N0    XXX   &mt LCTRL RPAR               XXX          XXX           XXX            XXX          XXX           XXX
     // ╰─────────────┴─────────────┴─────────────┴─────────────┴───────────────────────────╯   ╰───────────────────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(sym,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
              XXX      &tilde_grave   &kp EXCL      &kp AT         &kp HASH      &kp FSLH            XXX           XXX           XXX           XXX           XXX           XXX
     // ├─────────────┼─────────────┼─────────────┬─────────────┼─────────────┼─────────────┤   ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
              XXX       &kp PIPE      &kp CARET     &kp PRCNT      &kp DLLR      &kp BSLH            XXX         &kp LSHFT     &kp LGUI       &kp LALT     &kp LCTRL       XXX
     // ├─────────────┼─────────────┼─────────────┬─────────────┼─────────────┼─────────────┤   ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
              XXX       &kp UNDER     &kp AMPS      &kp STAR       &kp LPAR      &kp RPAR            XXX            XXX           XXX          XXX           XXX           XXX
     // ╰─────────────┼─────────────┼─────────────┬─────────────┼─────────────┼─────────────┤   ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
              XXX            XXX      &kp LBKT      &kp RBKT         XXX      &kp LBRC               XXX            XXX            XXX           XXX         XXX           XXX
     // ╰─────────────┴─────────────┴─────────────┴─────────────┴───────────────────────────╯   ╰───────────────────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(sys,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
            &kp F1         &kp F2        &kp F3       &kp F4        &kp F5       &kp F6              &kp F7        &kp F8       &kp F9       &kp F10        &kp F11       &kp F12
     // ├─────────────┼─────────────┼─────────────┬─────────────┼─────────────┼─────────────┤   ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
              XXX        &sys_reset    &bootloader      XXX           XXX          XXX           &kp LC(LS(M))  &kp C_VOL_UP      XXX           XXX        &sys_reset      XXX
     // ├─────────────┼─────────────┼─────────────┬─────────────┼─────────────┼─────────────┤   ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
              XXX       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2   &bt BT_CLR      XXX            &kp C_MUTE    &kp C_VOL_DN      XXX           XXX           XXX          XXX
     // ╰─────────────┼─────────────┼─────────────┬─────────────┼─────────────┼─────────────┤   ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
              XXX            XXX         XXX            XXX           XXX          XXX               XXX           XXX            XXX           XXX           XXX          XXX
     // ╰─────────────┴─────────────┴─────────────┴─────────────┴───────────────────────────╯   ╰───────────────────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(lan,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬────────────╮   ╭─────────────┬──────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
           &kp GRAVE      XXX            XXX         &kp RA(E)       XXX           XXX              XXX          &kp RA(Y)       XXX         &kp RA(P)       XXX          &bs_del
     // ├─────────────┼─────────────┼─────────────┬─────────────┼─────────────┼─────────────┤   ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
            XXX           &kp RA(Q)   &kp RA(S)        XXX           XXX           XXX               XXX           XXX           XXX           XXX           XXX            XXX
     // ├─────────────┼─────────────┼─────────────┬─────────────┼─────────────┼─────────────┤   ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &smart_shft      XXX            XXX          XXX           XXX           XXX               XXX           XXX         &kp COMMA      &kp DOT       &kp FSLH     &smart_shft
     // ╰─────────────┼─────────────┼─────────────┬─────────────┼─────────────┼─────────────┤   ├─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
              XXX            XXX         XXX            XXX          XXX           XXX               XXX           XXX           XXX           &to DEF      &to WDEF       &to COL 
     // ╰─────────────┴─────────────┴─────────────┴─────────────┴───────────────────────────╯   ╰───────────────────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
)
